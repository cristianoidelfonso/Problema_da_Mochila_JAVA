/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Random;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import model.Objetos;
import model.Individuo;
import model.Mochila;

/**
 *
 * @author Idelfonso
 */
public class TelaPrincipal extends javax.swing.JFrame {
    
    private DefaultListModel<String> listModel; 
    private final Random rd = new Random();
    private String valorObj[];
    private String pesoObj[];
    private final Mochila mochila;
    private Objetos objeto;
    private Individuo individuo;
    ArrayList<Objetos> listaObjetos;
    private ArrayList<Individuo> populacao;
    private ArrayList<Individuo> individuosIniciais;
   
    /**
     * Creates new form TelaPrincipal
     */
    public TelaPrincipal() {
        initComponents();
        spinerGeracoes.setValue(5);
        spinerCapacidade.setValue(878);
        spinerIndividuos.setValue(10);
        mochila = new Mochila(Float.parseFloat(spinerCapacidade.getValue().toString()));
        listaObjetos = new ArrayList<>();
    }
    /*========================================================================*/
    /**
     * Preenchimento de valores e pesos dos elementos
     * @return 
     */
    public boolean preencherPesosValores(){
        int capacidade = (int) spinerCapacidade.getValue();
        //----------------------------------------------------------------------
        valorObj = jTextValor.getText().trim().replaceAll("\\s","").split(",");
        pesoObj = jTextPeso.getText().trim().replaceAll("\\s","").split(",");
        mochila.setCapacidade( capacidade );
        //----------------------------------------------------------------------
        if (valorObj.length != pesoObj.length) {
            if (valorObj.length > pesoObj.length) {
                JOptionPane.showMessageDialog(this, 
                    "Quantidade de valores : " + valorObj.length + "\n\n" +
                    "ERRO: A quantidade de valores é maior que a quatidade de pesos digitados.\nConfira por favor!" );
                jTextPeso.requestFocus();
            }else{
                JOptionPane.showMessageDialog(this, 
                    "Quantidade de pesos : " + pesoObj.length + "\n\n" + 
                    "ERRO: A quantidade de pesos é maior que a quatidade de valores digitados.\nConfira por favor!" );
                jTextValor.requestFocus();
            } 
            return false;
        }else{
            System.out.println("A quantidade de pesos e valores são iguais!");
            Object[] options = { "Confirmar", "Cancelar" };
            
            int opcao = JOptionPane.showOptionDialog(this, 
                    "Confirme a criação da lista de objetos.", "Confirmação", 
                    JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, 
                    null, options, options[0]
            );
            if (opcao == 0) {
                for (int i = 0; i < valorObj.length; i++) {
                    objeto = new Objetos(i+1);
                    objeto.setValor(Float.parseFloat(valorObj[i]) );
                    objeto.setPeso(Float.parseFloat(pesoObj[i]) );

                    objeto.println();

                    listaObjetos.add( objeto );
                }
                //----------------------------------------------------------------------
                //pesos :   44,46,90,72,91,40,75,35,8,54,78,40,77,15,61,17,75,29,75,63
                //valores : 92,4,43,83,84,68,92,82,6,44,32,18,56,83,25,96,70,48,14,58
                //mostra a lista de objetos, com pesos, e valores na tela
                jTextAreaConsole.setText("");
                jTextAreaConsole.append("====== LISTA DE OBJETOS ======\n");
                for (Objetos obj : listaObjetos) {
                    jTextAreaConsole.append("Objeto "+obj.getId()+" -->  |  Peso = "+obj.getPeso()+"  |  Valor = "+obj.getValor()+"\n");
                } 
                JOptionPane.showMessageDialog(this, "Lista de elementos criada com sucesso.\n" +
                    "Quantidade de elementos na lista : " + listaObjetos.size());
            }else{
                JOptionPane.showMessageDialog(this, "A lista nao foi criada!" + listaObjetos.size() );  
            }
            return true;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator2 = new javax.swing.JSeparator();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        spinerGeracoes = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        spinerIndividuos = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        spinerCapacidade = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        rbRoleta = new javax.swing.JRadioButton();
        rbTorneio = new javax.swing.JRadioButton();
        jTextPeso = new javax.swing.JTextField();
        jTextValor = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        btnGerar = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListPopulacao = new javax.swing.JList<>();
        btnIniciar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaConsole = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("IA / Algoritmos Genéticos - Problema da mochila");
        setBackground(new java.awt.Color(102, 102, 255));

        jPanel1.setBackground(new java.awt.Color(102, 102, 255));

        spinerGeracoes.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel1.setText("Numero de gerações : ");

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel2.setText("Quantidade de individuos : ");

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel3.setText("Capacidade da mochila : ");

        jLabel4.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel4.setText("Tipo de seleção : ");

        buttonGroup1.add(rbRoleta);
        rbRoleta.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        rbRoleta.setSelected(true);
        rbRoleta.setText("Roleta");

        buttonGroup1.add(rbTorneio);
        rbTorneio.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        rbTorneio.setText("Torneio");

        jTextPeso.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N

        jTextValor.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel5.setText("PESOS, separados por virgula. *");

        jLabel6.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel6.setText("VALORES, separados por virgula. *");

        btnGerar.setText("GERAR");
        btnGerar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGerarActionPerformed(evt);
            }
        });

        jButton2.setText("ADICIONAR");

        jListPopulacao.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jScrollPane1.setViewportView(jListPopulacao);

        btnIniciar.setText("INICIAR ALGORITMO");
        btnIniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIniciarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator3)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 1, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(spinerCapacidade, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spinerIndividuos, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spinerGeracoes, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(rbRoleta)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rbTorneio))
                    .addComponent(jTextPeso)
                    .addComponent(jTextValor)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnGerar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jScrollPane1)
                            .addComponent(btnIniciar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinerGeracoes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(spinerIndividuos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(spinerCapacidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(rbRoleta)
                    .addComponent(rbTorneio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextPeso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextValor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGerar)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnIniciar)
                .addContainerGap())
        );

        jTextAreaConsole.setColumns(20);
        jTextAreaConsole.setRows(5);
        jScrollPane2.setViewportView(jTextAreaConsole);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 609, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(5, 5, 5))
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 650, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(916, 689));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    
    /**
     * Gerando a população inicial.
     * @param evt 
     */
    private void btnGerarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGerarActionPerformed
        
        //btnGerar.setEnabled(false);
        listaObjetos.clear();
        
        if( !preencherPesosValores() ){
            jTextAreaConsole.append("Error");
        }else{

            listModel = new DefaultListModel<>();
            individuosIniciais = new ArrayList<>();

            while ( listModel.size() < (int)spinerIndividuos.getValue() ) {
                int sorteio = rd.nextInt( 2147483647 );
                if ( sorteio > ( 2147483647 / 2) ) {
                    String binario = Integer.toBinaryString( sorteio );
                    StringBuilder stringBuilder = new StringBuilder();

                    for ( int i = 0; i < listaObjetos.size(); i++ ) {
                        String aux = Character.toString(binario.charAt(i));
                        stringBuilder.append(aux);
                    }
                    String bin = stringBuilder.toString();
                    //JOptionPane.showMessageDialog(this, "Gerado "+ bin);

                    if ( validaCromossomo( bin )){ //true se o peso for menor ou igual a capacidade da mochila
                        float apt = 0;
                        float peso = 0;

                        for (int i = 0; i < bin.length(); i++) {
                            String aux = String.valueOf( bin.charAt(i) );
                            if (aux.equals("1")) {
                                apt += listaObjetos.get(i).getValor();
                                peso += listaObjetos.get(i).getPeso();
                            }
                        }
                        if ( ( peso <= mochila.getCapacidade()) && (apt > -1) && ( !listModel.contains(bin) )) {
                            //JOptionPane.showMessageDialog(this, "Selecionado:  "+stringBuilder+" --> | Peso: "+ peso+"  Aptidão: "+apt);
                            //adicionaNoListModel( stringBuilder );
                            listModel.addElement( bin );
                            individuo = new Individuo(bin, peso, apt);
                            individuosIniciais.add( individuo );
                            //jTextAreaConsole.append(listModel.size()+ " --> " + bin + " | Peso: "+ peso+" | Aptidão: "+apt+"\n" );

                        }else{
                            //JOptionPane.showMessageDialog(this, "Descartado "+ 
                                    //stringBuilder+" --> Peso = "+
                                    //peso+"  |  Aptidão = "+
                                    //apt+"\n");
                        }
                    }
                }  
            }

            //Collections.sort(individuosIniciais);

            //jTextAreaConsole.append("\n====== POPULAÇÂO INICIAL ORDENADA PELA APTIDÃO ORDEM DECRESCENTE ======\n");
            //for (Individuo idv : individuosIniciais) {
                //jTextAreaConsole.append(" "+idv.getBin()+" --> Peso = "+idv.getPeso()+"  |  Aptidão = "+idv.getAptidao()+"\n");    
            //}
            //coloca a lista de cromossomos, convertidos em binario, na jListPopulacao

            jListPopulacao.setModel( listModel ); 
        }
    }//GEN-LAST:event_btnGerarActionPerformed
    //--------------------------------------------------------------------------
    public float calcularAptidao(String bin) {
        float aptdao = -1;
        //testa a validação do cromossomo
        if ( validaCromossomo( bin ) ) {
            //percorre o cromossomo(_DNA), posição por posição
            for (int i = 0; i < bin.length(); i++) {
                //salva cada posição do cromossomo em uma String auxiliar
                String aux = String.valueOf( bin.charAt(i) );
                //testa se o bit, na posição i do cromossomo é igual a 1
                if (aux.equals("1")) {
                    //a variavel aptdao recebe o valor do beneficio referente ao objeto na posição i
                    aptdao += Float.parseFloat( valorObj[i] );
                }
            }
        }
        return aptdao; // aptdão é um valor inteiro que informa a soma dos valores de beneficio do cromossomo analisado
    }
    //--------------------------------------------------------------------------
    
    private void btnIniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIniciarActionPerformed
        // TODO add your handling code here:
        //if ((int) spinerGeracoes.getValue() > 0) {
            iniciarAlgoritmo();
        //} else {
            //JOptionPane.showMessageDialog(null, "Geração deve ser maior que 0", "AVISO", JOptionPane.INFORMATION_MESSAGE);
        //}
        
    }//GEN-LAST:event_btnIniciarActionPerformed
    //--------------------------------------------------------------------------
    public void iniciarAlgoritmo() {

        populacaoInicial();
        
        jTextAreaConsole.append("\n====== POPULAÇÃO INICIAL ======\n");
        for (Individuo idv : populacao) {
            jTextAreaConsole.append(" [ "+idv.getBin()+" ] --> Peso = "+idv.getPeso()+"  |  Aptidão = "+idv.getAptidao()+"  |  Prob: "+idv.getProbabilidade()+"\n");    
        }
        
        //ArrayList<Individuo> pais = selecaoPorAptidao();
        //jTextAreaConsole.append("\n====== SELECIONADOS POR APTIDAO======\n");
        //Collections.sort( pais );
        //for (Individuo idv : pais) {
            //jTextAreaConsole.append(" "+idv.getBin()+" --> Peso = "+idv.getPeso()+"  |  Aptidão = "+idv.getAptidao()+"\n");    
        //}
        /*
        ArrayList<Individuo> melhores = selecaoRoleta(populacao);
        Collections.sort( melhores );
        jTextAreaConsole.append("\n====== SELECIONADOS POR ROLETA======\n");
        for (Individuo idv : melhores) {
            jTextAreaConsole.append(" "+idv.getBin()+" --> Peso = "+idv.getPeso()+"  |  Aptidão = "+idv.getAptidao()+"\n");    
        }
        */
        
        ArrayList<Individuo> melhores = selecaoTorneio(populacao);
        Collections.sort( melhores );
        jTextAreaConsole.append("\n====== SELECIONADOS POR TORNEIO======\n");
        for (Individuo idv : melhores) {
            jTextAreaConsole.append(" "+idv.getBin()+" --> Peso = "+idv.getPeso()+"  |  Aptidão = "+idv.getAptidao()+"\n");    
        }
        
        
        int ger = 1;

        //criterio de parada
        while ( ger <= (int) spinerGeracoes.getValue() ) {

            jTextAreaConsole.append("\n******************** GERAÇÂO " + ger + " ********************\n");
            //jTextAreaConsole.append("População inicial >> " + listaElementos + "\n\n");
            //jTextAreaConsole.append("População >> " + idvSelecionados + "\n\n");
            //jTextAreaConsole.append("Ordenados >> " + novosIndividuos + "\n");
           
            //selecionados = geraNovaPopulacao();

            ger++;
        }   
    }
    //--------------------------------------------------------------------------
    public void populacaoInicial() {
        populacao = new ArrayList<>();
        float soma = 0;
        for ( Individuo idv : individuosIniciais ) {
            soma += idv.getAptidao(); //soma da aptidão de todos os individuos
            System.out.println("Soma total das aptidões: " + soma);
        }
        
        for (Individuo idv : individuosIniciais) {
            idv.setProbabilidade( (idv.getAptidao() / soma) * 100 );
            populacao.add( idv );
        } 
    }
    //--------------------------------------------------------------------------
    private ArrayList<Individuo> selecaoPorAptidao() {
        
        ArrayList<Individuo> selecao = new ArrayList<>();
        
        for (int i = 0; i < (populacao.size() / 2); i++){
            selecao.add(populacao.get(i));
        }
        return selecao;
    }
    //--------------------------------------------------------------------------
    public ArrayList<Individuo> selecaoRoleta(ArrayList<Individuo> idvs) {
        /*
        Calcula-se uma coluna de aptidões acumuladas. Em seguida, gera-se um número aleatório r 
        (tirado de uma distribuição uniforme) no intervalo [0, SOMA TOTAL], onde SOMA TOTAL é a soma de todas as aptidões.
        Por fim, o cromossomo selecionado é o primeiro (seguindo a tabela de cima para baixo) que possui aptido 
        acumulada maior que r.
        */
        ArrayList<Individuo> selecao = new ArrayList();
        DecimalFormat df = new DecimalFormat("0.00");
        float soma = 0;
        //percorre o ArrayList de cromossomos(individuos)
        for ( Individuo idv : idvs ) {
            soma += idv.getAptidao(); //soma da aptidão de todos os individuos
            System.out.println("Soma total das aptidões: " + soma);
        }
        
        //pesos :   44,46,90,72,91,40,75,35,8,54,78,40,77,15,61,17,75,29,75,63
        //valores : 92,4,43,83,84,68,92,82,6,44,32,18,56,83,25,96,70,48,14,58
        //Calcula a % de probabilidade de um idv ser escolhido e imprimi no console  
        jTextAreaConsole.append("\n====== PROBABILIDADE DE ESCOLHA ======\n");
        for (Individuo idv : idvs) {
            idv.setProbabilidade( (idv.getAptidao() / soma) * 100 );
            jTextAreaConsole.append("[" + idv.getBin() + " --> " + df.format( idv.getProbabilidade() ) + "%]\n");
        }

        //Ordena o melhores IDVS de acordo com a probabilidade de ser escolhido
        //seleciona um primeiro cromossomo
        for (int i = 0; i < idvs.size(); i++) {
          float a = idvs.get(i).getProbabilidade();
         
            //seleciona um segundo cromossomo
            for (int j = i; j < idvs.size(); j++) {
                float b = idvs.get(j).getProbabilidade();

                //compara os valores de probabilidade dos dois cromossomos selecionados
                if ( b > a ) {
                    individuo = idvs.get(j);
                    idvs.remove(j);
                    idvs.add(i, individuo);
                }
            }
        }
        
        int cont = 0;
        for (Individuo aux : idvs) {
            if (cont <= idvs.size() / 2) {
                selecao.add(aux);
                cont++;
            }
        }
        jTextAreaConsole.append("\n====== Individuos Selecionados ======\n");
        for (Individuo melhor : selecao) {
            jTextAreaConsole.append(" [ "+melhor.getBin()+ " -->  Prob: "+df.format(melhor.getProbabilidade())+" ]\n");
        }
        
        return selecao;
    }
    //--------------------------------------------------------------------------
    public ArrayList<Individuo> selecaoTorneio(ArrayList<Individuo> idvs){
        ArrayList<Individuo> selecao = new ArrayList();
        /*
        Seleção por Torneio.
        São escolhidos, aleatoriamente, (com probabilidades iguais) n cromossomos da população, e o cromossomo 
        com maior aptidão e selecionado para a população intermediária. O processo repete-se até preencher a 
        população intermediária. Utiliza-se, geralmente, o valor n = 3.
        */
        //pesos :   44,46,90,72,91,40,75,35,8,54,78,40,77,15,61,17,75,29,75,63
        //valores : 92,4,43,83,84,68,92,82,6,44,32,18,56,83,25,96,70,48,14,58
        ArrayList<Individuo> aux = new ArrayList();
        int k = 1;
        for(int i = 0; i < (idvs.size()/2); i++){
            while(aux.size() < 3){
                int t = rd.nextInt(idvs.size());
                individuo = idvs.get(t);
                if(!aux.contains(individuo)){
                    aux.add(individuo);
                }
            }
            //JOptionPane.showMessageDialog(null, k + " torneio ok");
            k++;
            Collections.sort(aux);
        
            selecao.add(aux.get(0));
            
            aux.clear();
        }
        return selecao;
    } 
    //--------------------------------------------------------------------------
    private void adicionaNoListModel( StringBuilder stringBuilder ){
        // adiciona no listModel 
        if ( !listModel.contains( stringBuilder ) ) {
            listModel.addElement( stringBuilder.toString());
        }else{
            System.out.println("Já existe!" +  stringBuilder);
            mutacaoStringBluider( stringBuilder );   
        }
    }
    //--------------------------------------------------------------------------
    private void mutacaoStringBluider( StringBuilder stringBuilder ){
        //mutação stringBuilder
        int pos = rd.nextInt( stringBuilder.length() );
        for ( int i = 0; i < stringBuilder.length(); i++ ) {
            if (i == pos) {
                if (stringBuilder.charAt(pos) == '1') {
                    stringBuilder.deleteCharAt(pos);
                    stringBuilder.append('0');
                } else {
                    stringBuilder.deleteCharAt(pos);
                    stringBuilder.append('1');
                }
            }
            adicionaNoListModel(stringBuilder);
        } 
    }
    //--------------------------------------------------------------------------
    
    //--------------------------------------------------------------------------
   
    //--------------------------------------------------------------------------
    
    
    
    //--------------------------------------------------------------------------
    public boolean validaCromossomo( String cromossomo) { //soma dos pesos
        float pesoTotal = 0;
        for ( int i = 0 ;  i < cromossomo.length(); i++ ) {
            String aux = String.valueOf( cromossomo.charAt(i) );
            if ( aux.equals("1") ) {
                pesoTotal += listaObjetos.get(i).getPeso();
            }  
        }
        System.out.println( cromossomo + " --> | peso = " + pesoTotal);
        return pesoTotal <= mochila.getCapacidade();
    }
    //--------------------------------------------------------------------------
    public float calculaAptidao( String cromossomo ) { //soma dos valores
        float aptidao = -1;
        if ( validaCromossomo( cromossomo )) {
            for ( int i = 0 ; i < cromossomo.length(); i++ ) {
                String aux = String.valueOf( cromossomo.charAt(i));
                if ( aux.equals("1") ) {
                    aptidao = Float.parseFloat(valorObj[i]);
                }
                //System.out.println("Posição " + i +"  | Valor do bit  " + aux+"  Aptidão  "+aptidao);
            }
            return aptidao;
        }
        return 0;
    }
    //--------------------------------------------------------------------------
    public float calculaPeso(String cromossomo){
        float peso = 0;
        if ( validaCromossomo( cromossomo )) {
            for ( int i = 0 ; i < cromossomo.length(); i++) {
                String aux = String.valueOf( cromossomo.charAt(i));
                if ( aux.equals("1") ) {
                    peso += Float.parseFloat(pesoObj[i]);
                }
                //System.out.println( "Posição" + i + " | Valor do bit  " + aux +"  Peso  "+peso);
            }
            return peso;
        }
        return peso;
    }
//==============================================================================    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGerar;
    private javax.swing.JButton btnIniciar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JList<String> jListPopulacao;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTextArea jTextAreaConsole;
    private javax.swing.JTextField jTextPeso;
    private javax.swing.JTextField jTextValor;
    private javax.swing.JRadioButton rbRoleta;
    private javax.swing.JRadioButton rbTorneio;
    private javax.swing.JSpinner spinerCapacidade;
    private javax.swing.JSpinner spinerGeracoes;
    private javax.swing.JSpinner spinerIndividuos;
    // End of variables declaration//GEN-END:variables

    
}
